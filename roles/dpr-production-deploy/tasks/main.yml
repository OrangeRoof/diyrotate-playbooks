---
- name: Update apt caches
  become: yes
  apt:
    upgrade: "yes"
    update_cache: yes
    autoremove: yes
    autoclean: yes
    cache_valid_time: 86400 #One day

- name: Apt - install packages
  become: yes
  apt:
    pkg: "{{ item }}"
    state: latest
  loop:
    - build-essential
    - python3
    - python3-pip
    - ffmpeg
    - libavcodec-dev
    - libavformat-dev
    - libavutil-dev
    - libswscale-dev
    - libopencv-dev
    - libopencv-imgproc-dev
    - libopencv-imgcodecs-dev
    - libopencv-video-dev
    - libopencv-videoio-dev
    - uwsgi
    - uwsgi-plugin-python3
    - certbot
    - python3-certbot-nginx

- name: Pip install flask
  pip:
    name: flask
  become: yes

- name: GIT clone netDPr github repo.
  git:
    repo: "{{ git_repo }}"
    dest: /srv/{{ project_name}}
    depth: "1"
    force: yes
  become: yes

- name: Check if static dir exists yet
  become: yes
  stat:
    path: "/var/www/{{site_fqdn}}"
  register: static_dir_check

- name: make static dir if it doesnt exist
  become: yes
  file:
    state: directory
    path: "/var/www/{{site_fqdn}}"
    owner: "www-data"
    group: "www-data"
    mode: "0750"
  when: not static_dir_check.stat.exists

- name: setup static assets
  become: yes
  copy:
    remote_src: yes
    src: "/srv/{{project_name}}/static/"
    dest: "/var/www/{{site_fqdn}}"
    owner: "www-data"
    group: "www-data"
    mode: "0750"

- name: create /uploads folder for web
  become: yes
  file:
    state: directory
    path: "/var/www/{{site_fqdn}}/uploads"
    owner: "www-data"
    group: "www-data"
    mode: "0750"

- name: create /return folder for web
  become: yes
  file:
    state: directory
    path: "/var/www/{{site_fqdn}}/return"
    owner: "www-data"
    group: "www-data"
    mode: "0750"

- name: create /bin folder for web
  become: yes
  file:
    state: directory
    path: "/var/www/{{site_fqdn}}/bin"
    owner: "www-data"
    group: "www-data"
    mode: "0750"

- name: remove old binaries incase there are updates to the code. 
  become: yes
  shell:
    chdir: "/srv/{{ project_name }}/dcppr"
    cmd: "make ROOT_DIR=/var/www/ site={{ site_fqdn }} clean"
    removes: "derot"

- name: make all binaries
  become: yes
  shell:
    chdir: "/srv/{{ project_name }}/dcppr"
    cmd: "make ROOT_DIR=/var/www/ site={{ site_fqdn }} install"

- name: change permissions of all binaries
  become: yes
  file: 
    path: "{{ item }}"
    owner: "www-data"
    group: "www-data"
    mode: 0750
  with_fileglob:
    - "/var/www/{{ site_fqdn }}/*"

- name: create 'count' file for counter. 
  become: true
  file:
    path: /var/www/{{site_fqdn}}/count
    state: touch
    owner: "{{ webapp_user }}"
    group: "{{ webapp_user }}"
    mode: 0760

- name: Nginx.conf to  /etc/nginx/sites-available
  become: yes
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: /etc/nginx/sites-available/{{site_fqdn}}.conf
    owner: "www-data"
    group: "www-data"
    mode: "0644"

- name: link to active
  become: yes
  file:
    state: link
    src: /etc/nginx/sites-available/{{ site_fqdn }}.conf
    dest: /etc/nginx/sites-enabled/{{ site_fqdn }}.conf
    owner: "{{webapp_user}}"
    group: "{{webapp_user}}"

- name: create /etc/uwsgi
  become: true
  file:
    path: /etc/uwsgi
    state: directory

- name: create /etc/vassals
  become: true
  file:
    path: /etc/uwsgi/vassals
    state: directory

- name: Replace a localhost entry with our own
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: '^127\.0\.0\.1'
    line: 127.0.0.1 localhost
    owner: root
    group: root
    mode: "0644"

- name: link .ini to /etc/uwsgi/vassals
  become: yes
  template:
    src: diyrot.ini
    dest: /etc/uwsgi/vassals/{{ project_name }}.ini
    owner: "{{ webapp_user }}"
    group: "{{ webapp_user }}"

- name: setup logz at /var/log/uwsgi/
  become: true
  file:
    path: /var/log/uwsgi/
    state: directory

- name: create  logfile for uwsgi
  become: true
  file:
    path: /var/log/uwsgi/{{ project_name }}.log
    state: touch
    mode: 0775
    owner: "{{ webapp_user }}"
    group: "{{ webapp_user }}"

- name: create /run/uwsgi directory for sockets
  become: true
  file:
    path: /run/uwsgi
    state: directory
    owner: "{{ webapp_user }}"
    group: "{{ webapp_user }}"
    mode: 0760

- name: permissions.
  become: true
  file:
    state: directory
    mode: 0775
    recurse: yes
    owner: '{{ webapp_user }}'
    group: '{{ webapp_user }}'
    path:  '/srv/{{project_name}}'
    
- name: setup uwsgi service to launch at startup.
  become: true
  template:
    src: emperor.uwsgi.service
    owner: root
    group: root
    dest: /etc/systemd/system/emperor.uwsgi.service

- name: enable uwsgi service
  become: true
  service:
    name: emperor.uwsgi
    enabled: yes

- name: reload daemons
  become: true
  service:
    name: emperor.uwsgi
    daemon_reload: true

- name: start uwsgi service
  become: true
  service:
    name: emperor.uwsgi
    state: restarted

- name: ufw allow http
  become: yes
  ufw:
    rule: allow
    src: any
    port: http
    proto: tcp

- name: ufw allow https
  become: yes
  ufw:
    rule: allow
    src: any
    port: https
    proto: tcp

- name: Certbot it up.
  become: yes
  command: certbot --nginx -d {{ site_fqdn }} --non-interactive --redirect --agree-tos -m webmaster@epss.ucla.edu

- name: service check
  service:
    name: nginx
    state: started
  become: yes
